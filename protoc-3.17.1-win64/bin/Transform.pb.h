// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Transform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Transform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Transform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Transform_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Transform_2eproto;
namespace Protocol {
class S_TRANSFORM;
struct S_TRANSFORMDefaultTypeInternal;
extern S_TRANSFORMDefaultTypeInternal _S_TRANSFORM_default_instance_;
class TransformInfo;
struct TransformInfoDefaultTypeInternal;
extern TransformInfoDefaultTypeInternal _TransformInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::S_TRANSFORM* Arena::CreateMaybeMessage<::Protocol::S_TRANSFORM>(Arena*);
template<> ::Protocol::TransformInfo* Arena::CreateMaybeMessage<::Protocol::TransformInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class TransformInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.TransformInfo) */ {
 public:
  inline TransformInfo() : TransformInfo(nullptr) {}
  ~TransformInfo() override;
  explicit constexpr TransformInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformInfo(const TransformInfo& from);
  TransformInfo(TransformInfo&& from) noexcept
    : TransformInfo() {
    *this = ::std::move(from);
  }

  inline TransformInfo& operator=(const TransformInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformInfo& operator=(TransformInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformInfo* internal_default_instance() {
    return reinterpret_cast<const TransformInfo*>(
               &_TransformInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransformInfo& a, TransformInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransformInfo* New() const final {
    return new TransformInfo();
  }

  TransformInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransformInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransformInfo& from);
  void MergeFrom(const TransformInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.TransformInfo";
  }
  protected:
  explicit TransformInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPXFieldNumber = 1,
    kPYFieldNumber = 2,
    kPZFieldNumber = 3,
    kRXFieldNumber = 4,
    kRYFieldNumber = 5,
    kRZFieldNumber = 6,
  };
  // float p_x = 1;
  void clear_p_x();
  float p_x() const;
  void set_p_x(float value);
  private:
  float _internal_p_x() const;
  void _internal_set_p_x(float value);
  public:

  // float p_y = 2;
  void clear_p_y();
  float p_y() const;
  void set_p_y(float value);
  private:
  float _internal_p_y() const;
  void _internal_set_p_y(float value);
  public:

  // float p_z = 3;
  void clear_p_z();
  float p_z() const;
  void set_p_z(float value);
  private:
  float _internal_p_z() const;
  void _internal_set_p_z(float value);
  public:

  // float r_x = 4;
  void clear_r_x();
  float r_x() const;
  void set_r_x(float value);
  private:
  float _internal_r_x() const;
  void _internal_set_r_x(float value);
  public:

  // float r_y = 5;
  void clear_r_y();
  float r_y() const;
  void set_r_y(float value);
  private:
  float _internal_r_y() const;
  void _internal_set_r_y(float value);
  public:

  // float r_z = 6;
  void clear_r_z();
  float r_z() const;
  void set_r_z(float value);
  private:
  float _internal_r_z() const;
  void _internal_set_r_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.TransformInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float p_x_;
  float p_y_;
  float p_z_;
  float r_x_;
  float r_y_;
  float r_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Transform_2eproto;
};
// -------------------------------------------------------------------

class S_TRANSFORM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_TRANSFORM) */ {
 public:
  inline S_TRANSFORM() : S_TRANSFORM(nullptr) {}
  ~S_TRANSFORM() override;
  explicit constexpr S_TRANSFORM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_TRANSFORM(const S_TRANSFORM& from);
  S_TRANSFORM(S_TRANSFORM&& from) noexcept
    : S_TRANSFORM() {
    *this = ::std::move(from);
  }

  inline S_TRANSFORM& operator=(const S_TRANSFORM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_TRANSFORM& operator=(S_TRANSFORM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_TRANSFORM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_TRANSFORM* internal_default_instance() {
    return reinterpret_cast<const S_TRANSFORM*>(
               &_S_TRANSFORM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_TRANSFORM& a, S_TRANSFORM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_TRANSFORM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_TRANSFORM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_TRANSFORM* New() const final {
    return new S_TRANSFORM();
  }

  S_TRANSFORM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_TRANSFORM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_TRANSFORM& from);
  void MergeFrom(const S_TRANSFORM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_TRANSFORM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_TRANSFORM";
  }
  protected:
  explicit S_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kTransformFieldNumber = 3,
    kLayerIdFieldNumber = 2,
  };
  // string scene = 1;
  void clear_scene();
  const std::string& scene() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // .Protocol.TransformInfo transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::TransformInfo& transform() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::TransformInfo* release_transform();
  ::Protocol::TransformInfo* mutable_transform();
  void set_allocated_transform(::Protocol::TransformInfo* transform);
  private:
  const ::Protocol::TransformInfo& _internal_transform() const;
  ::Protocol::TransformInfo* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::TransformInfo* transform);
  ::Protocol::TransformInfo* unsafe_arena_release_transform();

  // uint32 layer_id = 2;
  void clear_layer_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_id() const;
  void set_layer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_id() const;
  void _internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_TRANSFORM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  ::Protocol::TransformInfo* transform_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Transform_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransformInfo

// float p_x = 1;
inline void TransformInfo::clear_p_x() {
  p_x_ = 0;
}
inline float TransformInfo::_internal_p_x() const {
  return p_x_;
}
inline float TransformInfo::p_x() const {
  // @@protoc_insertion_point(field_get:Protocol.TransformInfo.p_x)
  return _internal_p_x();
}
inline void TransformInfo::_internal_set_p_x(float value) {
  
  p_x_ = value;
}
inline void TransformInfo::set_p_x(float value) {
  _internal_set_p_x(value);
  // @@protoc_insertion_point(field_set:Protocol.TransformInfo.p_x)
}

// float p_y = 2;
inline void TransformInfo::clear_p_y() {
  p_y_ = 0;
}
inline float TransformInfo::_internal_p_y() const {
  return p_y_;
}
inline float TransformInfo::p_y() const {
  // @@protoc_insertion_point(field_get:Protocol.TransformInfo.p_y)
  return _internal_p_y();
}
inline void TransformInfo::_internal_set_p_y(float value) {
  
  p_y_ = value;
}
inline void TransformInfo::set_p_y(float value) {
  _internal_set_p_y(value);
  // @@protoc_insertion_point(field_set:Protocol.TransformInfo.p_y)
}

// float p_z = 3;
inline void TransformInfo::clear_p_z() {
  p_z_ = 0;
}
inline float TransformInfo::_internal_p_z() const {
  return p_z_;
}
inline float TransformInfo::p_z() const {
  // @@protoc_insertion_point(field_get:Protocol.TransformInfo.p_z)
  return _internal_p_z();
}
inline void TransformInfo::_internal_set_p_z(float value) {
  
  p_z_ = value;
}
inline void TransformInfo::set_p_z(float value) {
  _internal_set_p_z(value);
  // @@protoc_insertion_point(field_set:Protocol.TransformInfo.p_z)
}

// float r_x = 4;
inline void TransformInfo::clear_r_x() {
  r_x_ = 0;
}
inline float TransformInfo::_internal_r_x() const {
  return r_x_;
}
inline float TransformInfo::r_x() const {
  // @@protoc_insertion_point(field_get:Protocol.TransformInfo.r_x)
  return _internal_r_x();
}
inline void TransformInfo::_internal_set_r_x(float value) {
  
  r_x_ = value;
}
inline void TransformInfo::set_r_x(float value) {
  _internal_set_r_x(value);
  // @@protoc_insertion_point(field_set:Protocol.TransformInfo.r_x)
}

// float r_y = 5;
inline void TransformInfo::clear_r_y() {
  r_y_ = 0;
}
inline float TransformInfo::_internal_r_y() const {
  return r_y_;
}
inline float TransformInfo::r_y() const {
  // @@protoc_insertion_point(field_get:Protocol.TransformInfo.r_y)
  return _internal_r_y();
}
inline void TransformInfo::_internal_set_r_y(float value) {
  
  r_y_ = value;
}
inline void TransformInfo::set_r_y(float value) {
  _internal_set_r_y(value);
  // @@protoc_insertion_point(field_set:Protocol.TransformInfo.r_y)
}

// float r_z = 6;
inline void TransformInfo::clear_r_z() {
  r_z_ = 0;
}
inline float TransformInfo::_internal_r_z() const {
  return r_z_;
}
inline float TransformInfo::r_z() const {
  // @@protoc_insertion_point(field_get:Protocol.TransformInfo.r_z)
  return _internal_r_z();
}
inline void TransformInfo::_internal_set_r_z(float value) {
  
  r_z_ = value;
}
inline void TransformInfo::set_r_z(float value) {
  _internal_set_r_z(value);
  // @@protoc_insertion_point(field_set:Protocol.TransformInfo.r_z)
}

// -------------------------------------------------------------------

// S_TRANSFORM

// string scene = 1;
inline void S_TRANSFORM::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& S_TRANSFORM::scene() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TRANSFORM.scene)
  return _internal_scene();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_TRANSFORM::set_scene(ArgT0&& arg0, ArgT... args) {
 
 scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_TRANSFORM.scene)
}
inline std::string* S_TRANSFORM::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_TRANSFORM.scene)
  return _internal_mutable_scene();
}
inline const std::string& S_TRANSFORM::_internal_scene() const {
  return scene_.Get();
}
inline void S_TRANSFORM::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_TRANSFORM::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_TRANSFORM::release_scene() {
  // @@protoc_insertion_point(field_release:Protocol.S_TRANSFORM.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_TRANSFORM::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_TRANSFORM.scene)
}

// uint32 layer_id = 2;
inline void S_TRANSFORM::clear_layer_id() {
  layer_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_TRANSFORM::_internal_layer_id() const {
  return layer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_TRANSFORM::layer_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TRANSFORM.layer_id)
  return _internal_layer_id();
}
inline void S_TRANSFORM::_internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layer_id_ = value;
}
inline void S_TRANSFORM::set_layer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TRANSFORM.layer_id)
}

// .Protocol.TransformInfo transform = 3;
inline bool S_TRANSFORM::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool S_TRANSFORM::has_transform() const {
  return _internal_has_transform();
}
inline void S_TRANSFORM::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::Protocol::TransformInfo& S_TRANSFORM::_internal_transform() const {
  const ::Protocol::TransformInfo* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::TransformInfo&>(
      ::Protocol::_TransformInfo_default_instance_);
}
inline const ::Protocol::TransformInfo& S_TRANSFORM::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TRANSFORM.transform)
  return _internal_transform();
}
inline void S_TRANSFORM::unsafe_arena_set_allocated_transform(
    ::Protocol::TransformInfo* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_TRANSFORM.transform)
}
inline ::Protocol::TransformInfo* S_TRANSFORM::release_transform() {
  
  ::Protocol::TransformInfo* temp = transform_;
  transform_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::TransformInfo* S_TRANSFORM::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.S_TRANSFORM.transform)
  
  ::Protocol::TransformInfo* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Protocol::TransformInfo* S_TRANSFORM::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::TransformInfo>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Protocol::TransformInfo* S_TRANSFORM::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_TRANSFORM.transform)
  return _internal_mutable_transform();
}
inline void S_TRANSFORM::set_allocated_transform(::Protocol::TransformInfo* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::TransformInfo>::GetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_TRANSFORM.transform)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Transform_2eproto
