// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Map.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameObject_2eproto;
namespace Protocol {
class C_CREATE;
struct C_CREATEDefaultTypeInternal;
extern C_CREATEDefaultTypeInternal _C_CREATE_default_instance_;
class S_CREATE;
struct S_CREATEDefaultTypeInternal;
extern S_CREATEDefaultTypeInternal _S_CREATE_default_instance_;
class S_DELETE;
struct S_DELETEDefaultTypeInternal;
extern S_DELETEDefaultTypeInternal _S_DELETE_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_CREATE* Arena::CreateMaybeMessage<::Protocol::C_CREATE>(Arena*);
template<> ::Protocol::S_CREATE* Arena::CreateMaybeMessage<::Protocol::S_CREATE>(Arena*);
template<> ::Protocol::S_DELETE* Arena::CreateMaybeMessage<::Protocol::S_DELETE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_CREATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE) */ {
 public:
  inline C_CREATE() : C_CREATE(nullptr) {}
  ~C_CREATE() override;
  explicit constexpr C_CREATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE(const C_CREATE& from);
  C_CREATE(C_CREATE&& from) noexcept
    : C_CREATE() {
    *this = ::std::move(from);
  }

  inline C_CREATE& operator=(const C_CREATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE& operator=(C_CREATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE* internal_default_instance() {
    return reinterpret_cast<const C_CREATE*>(
               &_C_CREATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_CREATE& a, C_CREATE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CREATE* New() const final {
    return new C_CREATE();
  }

  C_CREATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CREATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CREATE& from);
  void MergeFrom(const C_CREATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE";
  }
  protected:
  explicit C_CREATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kLayerCreateidFieldNumber = 2,
  };
  // string scene = 1;
  void clear_scene();
  const std::string& scene() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // uint32 layer_createid = 2;
  void clear_layer_createid();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_createid() const;
  void set_layer_createid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_createid() const;
  void _internal_set_layer_createid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_createid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameObject_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE) */ {
 public:
  inline S_CREATE() : S_CREATE(nullptr) {}
  ~S_CREATE() override;
  explicit constexpr S_CREATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE(const S_CREATE& from);
  S_CREATE(S_CREATE&& from) noexcept
    : S_CREATE() {
    *this = ::std::move(from);
  }

  inline S_CREATE& operator=(const S_CREATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE& operator=(S_CREATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE* internal_default_instance() {
    return reinterpret_cast<const S_CREATE*>(
               &_S_CREATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_CREATE& a, S_CREATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CREATE* New() const final {
    return new S_CREATE();
  }

  S_CREATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CREATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CREATE& from);
  void MergeFrom(const S_CREATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE";
  }
  protected:
  explicit S_CREATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo object_info = 1;
  bool has_object_info() const;
  private:
  bool _internal_has_object_info() const;
  public:
  void clear_object_info();
  const ::Protocol::ObjectInfo& object_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::ObjectInfo* release_object_info();
  ::Protocol::ObjectInfo* mutable_object_info();
  void set_allocated_object_info(::Protocol::ObjectInfo* object_info);
  private:
  const ::Protocol::ObjectInfo& _internal_object_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_object_info();
  public:
  void unsafe_arena_set_allocated_object_info(
      ::Protocol::ObjectInfo* object_info);
  ::Protocol::ObjectInfo* unsafe_arena_release_object_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::ObjectInfo* object_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameObject_2eproto;
};
// -------------------------------------------------------------------

class S_DELETE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DELETE) */ {
 public:
  inline S_DELETE() : S_DELETE(nullptr) {}
  ~S_DELETE() override;
  explicit constexpr S_DELETE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DELETE(const S_DELETE& from);
  S_DELETE(S_DELETE&& from) noexcept
    : S_DELETE() {
    *this = ::std::move(from);
  }

  inline S_DELETE& operator=(const S_DELETE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DELETE& operator=(S_DELETE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DELETE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DELETE* internal_default_instance() {
    return reinterpret_cast<const S_DELETE*>(
               &_S_DELETE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_DELETE& a, S_DELETE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DELETE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DELETE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_DELETE* New() const final {
    return new S_DELETE();
  }

  S_DELETE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_DELETE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_DELETE& from);
  void MergeFrom(const S_DELETE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DELETE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DELETE";
  }
  protected:
  explicit S_DELETE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kLayerDeleteidFieldNumber = 2,
  };
  // string scene = 1;
  void clear_scene();
  const std::string& scene() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // uint32 layer_deleteid = 2;
  void clear_layer_deleteid();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_deleteid() const;
  void set_layer_deleteid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_deleteid() const;
  void _internal_set_layer_deleteid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DELETE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_deleteid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_CREATE

// string scene = 1;
inline void C_CREATE::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& C_CREATE::scene() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE.scene)
  return _internal_scene();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE::set_scene(ArgT0&& arg0, ArgT... args) {
 
 scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE.scene)
}
inline std::string* C_CREATE::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE.scene)
  return _internal_mutable_scene();
}
inline const std::string& C_CREATE::_internal_scene() const {
  return scene_.Get();
}
inline void C_CREATE::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CREATE::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CREATE::release_scene() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CREATE::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE.scene)
}

// uint32 layer_createid = 2;
inline void C_CREATE::clear_layer_createid() {
  layer_createid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_CREATE::_internal_layer_createid() const {
  return layer_createid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_CREATE::layer_createid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE.layer_createid)
  return _internal_layer_createid();
}
inline void C_CREATE::_internal_set_layer_createid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layer_createid_ = value;
}
inline void C_CREATE::set_layer_createid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_layer_createid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE.layer_createid)
}

// -------------------------------------------------------------------

// S_CREATE

// .Protocol.ObjectInfo object_info = 1;
inline bool S_CREATE::_internal_has_object_info() const {
  return this != internal_default_instance() && object_info_ != nullptr;
}
inline bool S_CREATE::has_object_info() const {
  return _internal_has_object_info();
}
inline const ::Protocol::ObjectInfo& S_CREATE::_internal_object_info() const {
  const ::Protocol::ObjectInfo* p = object_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_CREATE::object_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE.object_info)
  return _internal_object_info();
}
inline void S_CREATE::unsafe_arena_set_allocated_object_info(
    ::Protocol::ObjectInfo* object_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_info_);
  }
  object_info_ = object_info;
  if (object_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_CREATE.object_info)
}
inline ::Protocol::ObjectInfo* S_CREATE::release_object_info() {
  
  ::Protocol::ObjectInfo* temp = object_info_;
  object_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::ObjectInfo* S_CREATE::unsafe_arena_release_object_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE.object_info)
  
  ::Protocol::ObjectInfo* temp = object_info_;
  object_info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_CREATE::_internal_mutable_object_info() {
  
  if (object_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    object_info_ = p;
  }
  return object_info_;
}
inline ::Protocol::ObjectInfo* S_CREATE::mutable_object_info() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE.object_info)
  return _internal_mutable_object_info();
}
inline void S_CREATE::set_allocated_object_info(::Protocol::ObjectInfo* object_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_info_);
  }
  if (object_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_info));
    if (message_arena != submessage_arena) {
      object_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_info, submessage_arena);
    }
    
  } else {
    
  }
  object_info_ = object_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE.object_info)
}

// -------------------------------------------------------------------

// S_DELETE

// string scene = 1;
inline void S_DELETE::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& S_DELETE::scene() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DELETE.scene)
  return _internal_scene();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_DELETE::set_scene(ArgT0&& arg0, ArgT... args) {
 
 scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_DELETE.scene)
}
inline std::string* S_DELETE::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DELETE.scene)
  return _internal_mutable_scene();
}
inline const std::string& S_DELETE::_internal_scene() const {
  return scene_.Get();
}
inline void S_DELETE::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_DELETE::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_DELETE::release_scene() {
  // @@protoc_insertion_point(field_release:Protocol.S_DELETE.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_DELETE::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DELETE.scene)
}

// uint32 layer_deleteid = 2;
inline void S_DELETE::clear_layer_deleteid() {
  layer_deleteid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_DELETE::_internal_layer_deleteid() const {
  return layer_deleteid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_DELETE::layer_deleteid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DELETE.layer_deleteid)
  return _internal_layer_deleteid();
}
inline void S_DELETE::_internal_set_layer_deleteid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layer_deleteid_ = value;
}
inline void S_DELETE::set_layer_deleteid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_layer_deleteid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DELETE.layer_deleteid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameObject_2eproto
