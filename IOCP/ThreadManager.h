#pragma once
#include <functional>

//랜덤매타 : sleep user에서 소유권을 커널에게 넘기고 나중에 다시 확인
//system call user모드에서 하드웨에 작업을 요청하여 커널에게 게 일을 맏김
//그게 아니라 sleep을 써도 스스로 소유권을 커널에게 넘길 수 있음
//스케줄링 : cpu에서 여러 실행중인 스레드의 우선순위를 부여하여 어는 작업을 먼저 할 지 정함

//event 
//유저 레벨에서 스레드끼리의 순서보장을 위해서 관리자가(커널)이 순서를 보장해줌
//두개 이상의 스레드가 하나의 공유자원에 접근할 때 다른 스레드는 어떤 조건에 대해서 만족할 때 까지 대기를 함 (커널로)
//다른 스레드가 조건을 만족하면 커널은 대기한 다른 스레드를 깨워주는 방식
//만약 계속 대기를 하면 cpu점유율이 높아짐 하지만 커널 여역으로 contextswitching이 발생하기 때문에 확실하게 긴 시간 대기르할 때 사용해야함
//이벤트를 설정(true/false)하는 역할. (스레드 1)
// 
// 이벤트가 true가 될 때까지 대기. 대기 중에는 커널 모드로 전환되어 "잠들어 있는 상태"가 됩니다. (스레드2) 
// 대기 상태가 된 스레드는 CPU를 점유하지 않고 커널이 대기 큐에 넣어 관리. (커널이 이벤트를 감시하지 않음)
// 
//이벤트 객체의 상태 변화가 발생했을 때 관련 작업을 수행합니다.(커널)

//뮤텍스는 일반적으로 커널 수준의 락이며, 다음과 같은 특징을 가집니다 :
//락을 시도하는 스레드가 이미 다른 스레드에 의해 소유된 경우 :
//해당 스레드는 커널 모드로 전환되어 대기 상태로 들어갑니다.
//대기 중인 스레드는 CPU를 점유하지 않으며, 효율적으로 관리됩니다.
//락이 해제되면 커널은 대기 중인 스레드를 깨웁니다.


class ThreadManager
{

public:
	ThreadManager();
	~ThreadManager();


	void Excute(function<void(void)> _pFunc);
	void Join();

	static void init();
	static void clear();

private:
	vector<thread> m_vecThread;
	mutex m_mutex;
};

