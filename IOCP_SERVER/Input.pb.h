// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Input.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Input_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Input_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Input_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Input_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Input_2eproto;
namespace Protocol {
class C_INPUT;
struct C_INPUTDefaultTypeInternal;
extern C_INPUTDefaultTypeInternal _C_INPUT_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_INPUT* Arena::CreateMaybeMessage<::Protocol::C_INPUT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_INPUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_INPUT) */ {
 public:
  inline C_INPUT() : C_INPUT(nullptr) {}
  ~C_INPUT() override;
  explicit constexpr C_INPUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_INPUT(const C_INPUT& from);
  C_INPUT(C_INPUT&& from) noexcept
    : C_INPUT() {
    *this = ::std::move(from);
  }

  inline C_INPUT& operator=(const C_INPUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_INPUT& operator=(C_INPUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_INPUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_INPUT* internal_default_instance() {
    return reinterpret_cast<const C_INPUT*>(
               &_C_INPUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_INPUT& a, C_INPUT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_INPUT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_INPUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_INPUT* New() const final {
    return new C_INPUT();
  }

  C_INPUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_INPUT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_INPUT& from);
  void MergeFrom(const C_INPUT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_INPUT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_INPUT";
  }
  protected:
  explicit C_INPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInpusFieldNumber = 3,
    kClientnameFieldNumber = 1,
    kPlayeridFieldNumber = 2,
  };
  // repeated int32 inpus = 3;
  int inpus_size() const;
  private:
  int _internal_inpus_size() const;
  public:
  void clear_inpus();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inpus(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_inpus() const;
  void _internal_add_inpus(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_inpus();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 inpus(int index) const;
  void set_inpus(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_inpus(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      inpus() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_inpus();

  // string clientname = 1;
  void clear_clientname();
  const std::string& clientname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // int32 playerid = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_INPUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > inpus_;
  mutable std::atomic<int> _inpus_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Input_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_INPUT

// string clientname = 1;
inline void C_INPUT::clear_clientname() {
  clientname_.ClearToEmpty();
}
inline const std::string& C_INPUT::clientname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INPUT.clientname)
  return _internal_clientname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_INPUT::set_clientname(ArgT0&& arg0, ArgT... args) {
 
 clientname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_INPUT.clientname)
}
inline std::string* C_INPUT::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_INPUT.clientname)
  return _internal_mutable_clientname();
}
inline const std::string& C_INPUT::_internal_clientname() const {
  return clientname_.Get();
}
inline void C_INPUT::_internal_set_clientname(const std::string& value) {
  
  clientname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_INPUT::_internal_mutable_clientname() {
  
  return clientname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_INPUT::release_clientname() {
  // @@protoc_insertion_point(field_release:Protocol.C_INPUT.clientname)
  return clientname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_INPUT::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    
  } else {
    
  }
  clientname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INPUT.clientname)
}

// int32 playerid = 2;
inline void C_INPUT::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_INPUT::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_INPUT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INPUT.playerid)
  return _internal_playerid();
}
inline void C_INPUT::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void C_INPUT::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_INPUT.playerid)
}

// repeated int32 inpus = 3;
inline int C_INPUT::_internal_inpus_size() const {
  return inpus_.size();
}
inline int C_INPUT::inpus_size() const {
  return _internal_inpus_size();
}
inline void C_INPUT::clear_inpus() {
  inpus_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_INPUT::_internal_inpus(int index) const {
  return inpus_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_INPUT::inpus(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C_INPUT.inpus)
  return _internal_inpus(index);
}
inline void C_INPUT::set_inpus(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  inpus_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.C_INPUT.inpus)
}
inline void C_INPUT::_internal_add_inpus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  inpus_.Add(value);
}
inline void C_INPUT::add_inpus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_inpus(value);
  // @@protoc_insertion_point(field_add:Protocol.C_INPUT.inpus)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
C_INPUT::_internal_inpus() const {
  return inpus_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
C_INPUT::inpus() const {
  // @@protoc_insertion_point(field_list:Protocol.C_INPUT.inpus)
  return _internal_inpus();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
C_INPUT::_internal_mutable_inpus() {
  return &inpus_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
C_INPUT::mutable_inpus() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C_INPUT.inpus)
  return _internal_mutable_inpus();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Input_2eproto
