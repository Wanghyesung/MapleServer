// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Map_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Map_2eproto;
namespace Protocol {
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class S_MAP;
struct S_MAPDefaultTypeInternal;
extern S_MAPDefaultTypeInternal _S_MAP_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::S_MAP* Arena::CreateMaybeMessage<::Protocol::S_MAP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit constexpr ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectInfo* New() const final {
    return new ObjectInfo();
  }

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectInfo& from);
  void MergeFrom(const ObjectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kStateFieldNumber = 8,
    kLayerFieldNumber = 2,
    kIdFieldNumber = 3,
    kCreateIdFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
    kAnimIdxFieldNumber = 9,
  };
  // string scene = 1;
  void clear_scene();
  const std::string& scene() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // string state = 8;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // uint32 layer = 2;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer() const;
  void _internal_set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 create_id = 4;
  void clear_create_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 create_id() const;
  void set_create_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_create_id() const;
  void _internal_set_create_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float x = 5;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 6;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 7;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // int32 animIdx = 9;
  void clear_animidx();
  ::PROTOBUF_NAMESPACE_ID::int32 animidx() const;
  void set_animidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_animidx() const;
  void _internal_set_animidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 create_id_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 animidx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// -------------------------------------------------------------------

class S_MAP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MAP) */ {
 public:
  inline S_MAP() : S_MAP(nullptr) {}
  ~S_MAP() override;
  explicit constexpr S_MAP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MAP(const S_MAP& from);
  S_MAP(S_MAP&& from) noexcept
    : S_MAP() {
    *this = ::std::move(from);
  }

  inline S_MAP& operator=(const S_MAP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MAP& operator=(S_MAP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MAP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MAP* internal_default_instance() {
    return reinterpret_cast<const S_MAP*>(
               &_S_MAP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_MAP& a, S_MAP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MAP* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MAP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_MAP* New() const final {
    return new S_MAP();
  }

  S_MAP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_MAP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_MAP& from);
  void MergeFrom(const S_MAP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MAP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MAP";
  }
  protected:
  explicit S_MAP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjInfoFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo objInfo = 1;
  int objinfo_size() const;
  private:
  int _internal_objinfo_size() const;
  public:
  void clear_objinfo();
  ::Protocol::ObjectInfo* mutable_objinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_objinfo();
  private:
  const ::Protocol::ObjectInfo& _internal_objinfo(int index) const;
  ::Protocol::ObjectInfo* _internal_add_objinfo();
  public:
  const ::Protocol::ObjectInfo& objinfo(int index) const;
  ::Protocol::ObjectInfo* add_objinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      objinfo() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_MAP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > objinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectInfo

// string scene = 1;
inline void ObjectInfo::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& ObjectInfo::scene() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.scene)
  return _internal_scene();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInfo::set_scene(ArgT0&& arg0, ArgT... args) {
 
 scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.scene)
}
inline std::string* ObjectInfo::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.scene)
  return _internal_mutable_scene();
}
inline const std::string& ObjectInfo::_internal_scene() const {
  return scene_.Get();
}
inline void ObjectInfo::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectInfo::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectInfo::release_scene() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectInfo::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.scene)
}

// uint32 layer = 2;
inline void ObjectInfo::clear_layer() {
  layer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::_internal_layer() const {
  return layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::layer() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.layer)
  return _internal_layer();
}
inline void ObjectInfo::_internal_set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layer_ = value;
}
inline void ObjectInfo::set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.layer)
}

// uint32 id = 3;
inline void ObjectInfo::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.id)
  return _internal_id();
}
inline void ObjectInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ObjectInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.id)
}

// uint32 create_id = 4;
inline void ObjectInfo::clear_create_id() {
  create_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::_internal_create_id() const {
  return create_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::create_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.create_id)
  return _internal_create_id();
}
inline void ObjectInfo::_internal_set_create_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  create_id_ = value;
}
inline void ObjectInfo::set_create_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_create_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.create_id)
}

// float x = 5;
inline void ObjectInfo::clear_x() {
  x_ = 0;
}
inline float ObjectInfo::_internal_x() const {
  return x_;
}
inline float ObjectInfo::x() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.x)
  return _internal_x();
}
inline void ObjectInfo::_internal_set_x(float value) {
  
  x_ = value;
}
inline void ObjectInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.x)
}

// float y = 6;
inline void ObjectInfo::clear_y() {
  y_ = 0;
}
inline float ObjectInfo::_internal_y() const {
  return y_;
}
inline float ObjectInfo::y() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.y)
  return _internal_y();
}
inline void ObjectInfo::_internal_set_y(float value) {
  
  y_ = value;
}
inline void ObjectInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.y)
}

// float z = 7;
inline void ObjectInfo::clear_z() {
  z_ = 0;
}
inline float ObjectInfo::_internal_z() const {
  return z_;
}
inline float ObjectInfo::z() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.z)
  return _internal_z();
}
inline void ObjectInfo::_internal_set_z(float value) {
  
  z_ = value;
}
inline void ObjectInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.z)
}

// string state = 8;
inline void ObjectInfo::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& ObjectInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInfo::set_state(ArgT0&& arg0, ArgT... args) {
 
 state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.state)
}
inline std::string* ObjectInfo::mutable_state() {
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.state)
  return _internal_mutable_state();
}
inline const std::string& ObjectInfo::_internal_state() const {
  return state_.Get();
}
inline void ObjectInfo::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectInfo::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectInfo::release_state() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.state)
}

// int32 animIdx = 9;
inline void ObjectInfo::clear_animidx() {
  animidx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::_internal_animidx() const {
  return animidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::animidx() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.animIdx)
  return _internal_animidx();
}
inline void ObjectInfo::_internal_set_animidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  animidx_ = value;
}
inline void ObjectInfo::set_animidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_animidx(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.animIdx)
}

// -------------------------------------------------------------------

// S_MAP

// repeated .Protocol.ObjectInfo objInfo = 1;
inline int S_MAP::_internal_objinfo_size() const {
  return objinfo_.size();
}
inline int S_MAP::objinfo_size() const {
  return _internal_objinfo_size();
}
inline void S_MAP::clear_objinfo() {
  objinfo_.Clear();
}
inline ::Protocol::ObjectInfo* S_MAP::mutable_objinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_MAP.objInfo)
  return objinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_MAP::mutable_objinfo() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_MAP.objInfo)
  return &objinfo_;
}
inline const ::Protocol::ObjectInfo& S_MAP::_internal_objinfo(int index) const {
  return objinfo_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_MAP::objinfo(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_MAP.objInfo)
  return _internal_objinfo(index);
}
inline ::Protocol::ObjectInfo* S_MAP::_internal_add_objinfo() {
  return objinfo_.Add();
}
inline ::Protocol::ObjectInfo* S_MAP::add_objinfo() {
  // @@protoc_insertion_point(field_add:Protocol.S_MAP.objInfo)
  return _internal_add_objinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_MAP::objinfo() const {
  // @@protoc_insertion_point(field_list:Protocol.S_MAP.objInfo)
  return objinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Map_2eproto
