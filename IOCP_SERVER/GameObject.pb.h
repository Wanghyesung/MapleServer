// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameObject_2eproto;
namespace Protocol {
class C_CREATE;
struct C_CREATEDefaultTypeInternal;
extern C_CREATEDefaultTypeInternal _C_CREATE_default_instance_;
class S_CREATE;
struct S_CREATEDefaultTypeInternal;
extern S_CREATEDefaultTypeInternal _S_CREATE_default_instance_;
class S_DELETE;
struct S_DELETEDefaultTypeInternal;
extern S_DELETEDefaultTypeInternal _S_DELETE_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_CREATE* Arena::CreateMaybeMessage<::Protocol::C_CREATE>(Arena*);
template<> ::Protocol::S_CREATE* Arena::CreateMaybeMessage<::Protocol::S_CREATE>(Arena*);
template<> ::Protocol::S_DELETE* Arena::CreateMaybeMessage<::Protocol::S_DELETE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_CREATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE) */ {
 public:
  inline C_CREATE() : C_CREATE(nullptr) {}
  ~C_CREATE() override;
  explicit constexpr C_CREATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE(const C_CREATE& from);
  C_CREATE(C_CREATE&& from) noexcept
    : C_CREATE() {
    *this = ::std::move(from);
  }

  inline C_CREATE& operator=(const C_CREATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE& operator=(C_CREATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE* internal_default_instance() {
    return reinterpret_cast<const C_CREATE*>(
               &_C_CREATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_CREATE& a, C_CREATE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CREATE* New() const final {
    return new C_CREATE();
  }

  C_CREATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CREATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CREATE& from);
  void MergeFrom(const C_CREATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE";
  }
  protected:
  explicit C_CREATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kLayerFieldNumber = 2,
    kCreateIdFieldNumber = 3,
  };
  // string scene = 1;
  void clear_scene();
  const std::string& scene() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // int32 layer = 2;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer() const;
  void _internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 create_id = 3;
  void clear_create_id();
  ::PROTOBUF_NAMESPACE_ID::int32 create_id() const;
  void set_create_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_create_id() const;
  void _internal_set_create_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_;
  ::PROTOBUF_NAMESPACE_ID::int32 create_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameObject_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE) */ {
 public:
  inline S_CREATE() : S_CREATE(nullptr) {}
  ~S_CREATE() override;
  explicit constexpr S_CREATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE(const S_CREATE& from);
  S_CREATE(S_CREATE&& from) noexcept
    : S_CREATE() {
    *this = ::std::move(from);
  }

  inline S_CREATE& operator=(const S_CREATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE& operator=(S_CREATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE* internal_default_instance() {
    return reinterpret_cast<const S_CREATE*>(
               &_S_CREATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_CREATE& a, S_CREATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CREATE* New() const final {
    return new S_CREATE();
  }

  S_CREATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CREATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CREATE& from);
  void MergeFrom(const S_CREATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE";
  }
  protected:
  explicit S_CREATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kStateFieldNumber = 4,
    kLayerFieldNumber = 2,
    kIdFieldNumber = 3,
    kAnimIdxFieldNumber = 5,
  };
  // string scene = 1;
  void clear_scene();
  const std::string& scene() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // string state = 4;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // int32 layer = 2;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer() const;
  void _internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 anim_idx = 5;
  void clear_anim_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 anim_idx() const;
  void set_anim_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_anim_idx() const;
  void _internal_set_anim_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 anim_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameObject_2eproto;
};
// -------------------------------------------------------------------

class S_DELETE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DELETE) */ {
 public:
  inline S_DELETE() : S_DELETE(nullptr) {}
  ~S_DELETE() override;
  explicit constexpr S_DELETE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DELETE(const S_DELETE& from);
  S_DELETE(S_DELETE&& from) noexcept
    : S_DELETE() {
    *this = ::std::move(from);
  }

  inline S_DELETE& operator=(const S_DELETE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DELETE& operator=(S_DELETE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DELETE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DELETE* internal_default_instance() {
    return reinterpret_cast<const S_DELETE*>(
               &_S_DELETE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_DELETE& a, S_DELETE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DELETE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DELETE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_DELETE* New() const final {
    return new S_DELETE();
  }

  S_DELETE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_DELETE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_DELETE& from);
  void MergeFrom(const S_DELETE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DELETE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DELETE";
  }
  protected:
  explicit S_DELETE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kLayerFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string scene = 1;
  void clear_scene();
  const std::string& scene() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // string layer = 2;
  void clear_layer();
  const std::string& layer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_layer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_layer();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_layer();
  void set_allocated_layer(std::string* layer);
  private:
  const std::string& _internal_layer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layer(const std::string& value);
  std::string* _internal_mutable_layer();
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DELETE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_CREATE

// string scene = 1;
inline void C_CREATE::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& C_CREATE::scene() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE.scene)
  return _internal_scene();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE::set_scene(ArgT0&& arg0, ArgT... args) {
 
 scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE.scene)
}
inline std::string* C_CREATE::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE.scene)
  return _internal_mutable_scene();
}
inline const std::string& C_CREATE::_internal_scene() const {
  return scene_.Get();
}
inline void C_CREATE::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CREATE::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CREATE::release_scene() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CREATE::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE.scene)
}

// int32 layer = 2;
inline void C_CREATE::clear_layer() {
  layer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_CREATE::_internal_layer() const {
  return layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_CREATE::layer() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE.layer)
  return _internal_layer();
}
inline void C_CREATE::_internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_ = value;
}
inline void C_CREATE::set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE.layer)
}

// int32 create_id = 3;
inline void C_CREATE::clear_create_id() {
  create_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_CREATE::_internal_create_id() const {
  return create_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_CREATE::create_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE.create_id)
  return _internal_create_id();
}
inline void C_CREATE::_internal_set_create_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  create_id_ = value;
}
inline void C_CREATE::set_create_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_create_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE.create_id)
}

// -------------------------------------------------------------------

// S_CREATE

// string scene = 1;
inline void S_CREATE::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& S_CREATE::scene() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE.scene)
  return _internal_scene();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CREATE::set_scene(ArgT0&& arg0, ArgT... args) {
 
 scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE.scene)
}
inline std::string* S_CREATE::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE.scene)
  return _internal_mutable_scene();
}
inline const std::string& S_CREATE::_internal_scene() const {
  return scene_.Get();
}
inline void S_CREATE::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CREATE::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CREATE::release_scene() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CREATE::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE.scene)
}

// int32 layer = 2;
inline void S_CREATE::clear_layer() {
  layer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE::_internal_layer() const {
  return layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE::layer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE.layer)
  return _internal_layer();
}
inline void S_CREATE::_internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_ = value;
}
inline void S_CREATE::set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE.layer)
}

// int32 id = 3;
inline void S_CREATE::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE.id)
  return _internal_id();
}
inline void S_CREATE::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void S_CREATE::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE.id)
}

// string state = 4;
inline void S_CREATE::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& S_CREATE::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CREATE::set_state(ArgT0&& arg0, ArgT... args) {
 
 state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE.state)
}
inline std::string* S_CREATE::mutable_state() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE.state)
  return _internal_mutable_state();
}
inline const std::string& S_CREATE::_internal_state() const {
  return state_.Get();
}
inline void S_CREATE::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CREATE::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CREATE::release_state() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CREATE::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE.state)
}

// int32 anim_idx = 5;
inline void S_CREATE::clear_anim_idx() {
  anim_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE::_internal_anim_idx() const {
  return anim_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE::anim_idx() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE.anim_idx)
  return _internal_anim_idx();
}
inline void S_CREATE::_internal_set_anim_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  anim_idx_ = value;
}
inline void S_CREATE::set_anim_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_anim_idx(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE.anim_idx)
}

// -------------------------------------------------------------------

// S_DELETE

// string scene = 1;
inline void S_DELETE::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& S_DELETE::scene() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DELETE.scene)
  return _internal_scene();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_DELETE::set_scene(ArgT0&& arg0, ArgT... args) {
 
 scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_DELETE.scene)
}
inline std::string* S_DELETE::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DELETE.scene)
  return _internal_mutable_scene();
}
inline const std::string& S_DELETE::_internal_scene() const {
  return scene_.Get();
}
inline void S_DELETE::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_DELETE::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_DELETE::release_scene() {
  // @@protoc_insertion_point(field_release:Protocol.S_DELETE.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_DELETE::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DELETE.scene)
}

// string layer = 2;
inline void S_DELETE::clear_layer() {
  layer_.ClearToEmpty();
}
inline const std::string& S_DELETE::layer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DELETE.layer)
  return _internal_layer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_DELETE::set_layer(ArgT0&& arg0, ArgT... args) {
 
 layer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_DELETE.layer)
}
inline std::string* S_DELETE::mutable_layer() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DELETE.layer)
  return _internal_mutable_layer();
}
inline const std::string& S_DELETE::_internal_layer() const {
  return layer_.Get();
}
inline void S_DELETE::_internal_set_layer(const std::string& value) {
  
  layer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_DELETE::_internal_mutable_layer() {
  
  return layer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_DELETE::release_layer() {
  // @@protoc_insertion_point(field_release:Protocol.S_DELETE.layer)
  return layer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_DELETE::set_allocated_layer(std::string* layer) {
  if (layer != nullptr) {
    
  } else {
    
  }
  layer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DELETE.layer)
}

// int32 id = 3;
inline void S_DELETE::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_DELETE::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_DELETE::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DELETE.id)
  return _internal_id();
}
inline void S_DELETE::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void S_DELETE::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DELETE.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameObject_2eproto
