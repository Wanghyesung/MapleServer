// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Equip.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Equip_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Equip_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Equip_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Equip_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Equip_2eproto;
namespace Protocol {
class C_EQUIP;
struct C_EQUIPDefaultTypeInternal;
extern C_EQUIPDefaultTypeInternal _C_EQUIP_default_instance_;
class S_EQUIP;
struct S_EQUIPDefaultTypeInternal;
extern S_EQUIPDefaultTypeInternal _S_EQUIP_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_EQUIP* Arena::CreateMaybeMessage<::Protocol::C_EQUIP>(Arena*);
template<> ::Protocol::S_EQUIP* Arena::CreateMaybeMessage<::Protocol::S_EQUIP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_EQUIP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_EQUIP) */ {
 public:
  inline C_EQUIP() : C_EQUIP(nullptr) {}
  ~C_EQUIP() override;
  explicit constexpr C_EQUIP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_EQUIP(const C_EQUIP& from);
  C_EQUIP(C_EQUIP&& from) noexcept
    : C_EQUIP() {
    *this = ::std::move(from);
  }

  inline C_EQUIP& operator=(const C_EQUIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_EQUIP& operator=(C_EQUIP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_EQUIP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_EQUIP* internal_default_instance() {
    return reinterpret_cast<const C_EQUIP*>(
               &_C_EQUIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_EQUIP& a, C_EQUIP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_EQUIP* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_EQUIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_EQUIP* New() const final {
    return new C_EQUIP();
  }

  C_EQUIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_EQUIP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_EQUIP& from);
  void MergeFrom(const C_EQUIP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_EQUIP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_EQUIP";
  }
  protected:
  explicit C_EQUIP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kItemNameFieldNumber = 4,
    kLayerFieldNumber = 2,
    kPlayerIdFieldNumber = 3,
    kEquipTypeFieldNumber = 5,
  };
  // string scene = 1;
  void clear_scene();
  const std::string& scene() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // string item_name = 4;
  void clear_item_name();
  const std::string& item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);
  private:
  const std::string& _internal_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_name(const std::string& value);
  std::string* _internal_mutable_item_name();
  public:

  // uint32 layer = 2;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer() const;
  void _internal_set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 player_id = 3;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 equip_type = 5;
  void clear_equip_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 equip_type() const;
  void set_equip_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_equip_type() const;
  void _internal_set_equip_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_EQUIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 equip_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Equip_2eproto;
};
// -------------------------------------------------------------------

class S_EQUIP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_EQUIP) */ {
 public:
  inline S_EQUIP() : S_EQUIP(nullptr) {}
  ~S_EQUIP() override;
  explicit constexpr S_EQUIP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_EQUIP(const S_EQUIP& from);
  S_EQUIP(S_EQUIP&& from) noexcept
    : S_EQUIP() {
    *this = ::std::move(from);
  }

  inline S_EQUIP& operator=(const S_EQUIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_EQUIP& operator=(S_EQUIP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_EQUIP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_EQUIP* internal_default_instance() {
    return reinterpret_cast<const S_EQUIP*>(
               &_S_EQUIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_EQUIP& a, S_EQUIP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_EQUIP* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_EQUIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_EQUIP* New() const final {
    return new S_EQUIP();
  }

  S_EQUIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_EQUIP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_EQUIP& from);
  void MergeFrom(const S_EQUIP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_EQUIP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_EQUIP";
  }
  protected:
  explicit S_EQUIP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kItemNameFieldNumber = 4,
    kLayerFieldNumber = 2,
    kPlayerIdFieldNumber = 3,
    kEquipTypeFieldNumber = 5,
  };
  // string scene = 1;
  void clear_scene();
  const std::string& scene() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scene();
  void set_allocated_scene(std::string* scene);
  private:
  const std::string& _internal_scene() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene(const std::string& value);
  std::string* _internal_mutable_scene();
  public:

  // string item_name = 4;
  void clear_item_name();
  const std::string& item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);
  private:
  const std::string& _internal_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_name(const std::string& value);
  std::string* _internal_mutable_item_name();
  public:

  // uint32 layer = 2;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer() const;
  void _internal_set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 player_id = 3;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 equip_type = 5;
  void clear_equip_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 equip_type() const;
  void set_equip_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_equip_type() const;
  void _internal_set_equip_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_EQUIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 equip_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Equip_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_EQUIP

// string scene = 1;
inline void C_EQUIP::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& C_EQUIP::scene() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EQUIP.scene)
  return _internal_scene();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_EQUIP::set_scene(ArgT0&& arg0, ArgT... args) {
 
 scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_EQUIP.scene)
}
inline std::string* C_EQUIP::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_EQUIP.scene)
  return _internal_mutable_scene();
}
inline const std::string& C_EQUIP::_internal_scene() const {
  return scene_.Get();
}
inline void C_EQUIP::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_EQUIP::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_EQUIP::release_scene() {
  // @@protoc_insertion_point(field_release:Protocol.C_EQUIP.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_EQUIP::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_EQUIP.scene)
}

// uint32 layer = 2;
inline void C_EQUIP::clear_layer() {
  layer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_EQUIP::_internal_layer() const {
  return layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_EQUIP::layer() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EQUIP.layer)
  return _internal_layer();
}
inline void C_EQUIP::_internal_set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layer_ = value;
}
inline void C_EQUIP::set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EQUIP.layer)
}

// uint32 player_id = 3;
inline void C_EQUIP::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_EQUIP::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_EQUIP::player_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EQUIP.player_id)
  return _internal_player_id();
}
inline void C_EQUIP::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void C_EQUIP::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EQUIP.player_id)
}

// string item_name = 4;
inline void C_EQUIP::clear_item_name() {
  item_name_.ClearToEmpty();
}
inline const std::string& C_EQUIP::item_name() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EQUIP.item_name)
  return _internal_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_EQUIP::set_item_name(ArgT0&& arg0, ArgT... args) {
 
 item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_EQUIP.item_name)
}
inline std::string* C_EQUIP::mutable_item_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_EQUIP.item_name)
  return _internal_mutable_item_name();
}
inline const std::string& C_EQUIP::_internal_item_name() const {
  return item_name_.Get();
}
inline void C_EQUIP::_internal_set_item_name(const std::string& value) {
  
  item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_EQUIP::_internal_mutable_item_name() {
  
  return item_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_EQUIP::release_item_name() {
  // @@protoc_insertion_point(field_release:Protocol.C_EQUIP.item_name)
  return item_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_EQUIP::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    
  } else {
    
  }
  item_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_EQUIP.item_name)
}

// uint32 equip_type = 5;
inline void C_EQUIP::clear_equip_type() {
  equip_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_EQUIP::_internal_equip_type() const {
  return equip_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_EQUIP::equip_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EQUIP.equip_type)
  return _internal_equip_type();
}
inline void C_EQUIP::_internal_set_equip_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  equip_type_ = value;
}
inline void C_EQUIP::set_equip_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_equip_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EQUIP.equip_type)
}

// -------------------------------------------------------------------

// S_EQUIP

// string scene = 1;
inline void S_EQUIP::clear_scene() {
  scene_.ClearToEmpty();
}
inline const std::string& S_EQUIP::scene() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EQUIP.scene)
  return _internal_scene();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_EQUIP::set_scene(ArgT0&& arg0, ArgT... args) {
 
 scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_EQUIP.scene)
}
inline std::string* S_EQUIP::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_EQUIP.scene)
  return _internal_mutable_scene();
}
inline const std::string& S_EQUIP::_internal_scene() const {
  return scene_.Get();
}
inline void S_EQUIP::_internal_set_scene(const std::string& value) {
  
  scene_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_EQUIP::_internal_mutable_scene() {
  
  return scene_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_EQUIP::release_scene() {
  // @@protoc_insertion_point(field_release:Protocol.S_EQUIP.scene)
  return scene_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_EQUIP::set_allocated_scene(std::string* scene) {
  if (scene != nullptr) {
    
  } else {
    
  }
  scene_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_EQUIP.scene)
}

// uint32 layer = 2;
inline void S_EQUIP::clear_layer() {
  layer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_EQUIP::_internal_layer() const {
  return layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_EQUIP::layer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EQUIP.layer)
  return _internal_layer();
}
inline void S_EQUIP::_internal_set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layer_ = value;
}
inline void S_EQUIP::set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EQUIP.layer)
}

// uint32 player_id = 3;
inline void S_EQUIP::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_EQUIP::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_EQUIP::player_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EQUIP.player_id)
  return _internal_player_id();
}
inline void S_EQUIP::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void S_EQUIP::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EQUIP.player_id)
}

// string item_name = 4;
inline void S_EQUIP::clear_item_name() {
  item_name_.ClearToEmpty();
}
inline const std::string& S_EQUIP::item_name() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EQUIP.item_name)
  return _internal_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_EQUIP::set_item_name(ArgT0&& arg0, ArgT... args) {
 
 item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_EQUIP.item_name)
}
inline std::string* S_EQUIP::mutable_item_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_EQUIP.item_name)
  return _internal_mutable_item_name();
}
inline const std::string& S_EQUIP::_internal_item_name() const {
  return item_name_.Get();
}
inline void S_EQUIP::_internal_set_item_name(const std::string& value) {
  
  item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_EQUIP::_internal_mutable_item_name() {
  
  return item_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_EQUIP::release_item_name() {
  // @@protoc_insertion_point(field_release:Protocol.S_EQUIP.item_name)
  return item_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_EQUIP::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    
  } else {
    
  }
  item_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_EQUIP.item_name)
}

// uint32 equip_type = 5;
inline void S_EQUIP::clear_equip_type() {
  equip_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_EQUIP::_internal_equip_type() const {
  return equip_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_EQUIP::equip_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EQUIP.equip_type)
  return _internal_equip_type();
}
inline void S_EQUIP::_internal_set_equip_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  equip_type_ = value;
}
inline void S_EQUIP::set_equip_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_equip_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EQUIP.equip_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Equip_2eproto
